version: 2.1

parameters:
  memstash-token:
    type: string
    default: "d8a87e63-bb9d-43af-91e1-8145d5d56b0f"
    #Put Example
    # curl -H "Content-Type: text/plain" -H "token: d8a87e63-bb9d-43af-91e1-8145d5d56b0f" --request PUT --data "" https://api.memstash.io/values/
    #Get Example
    # curl -H "token: d8a87e63-bb9d-43af-91e1-8145d5d56b0f" --request GET https://api.memstash.io/values/

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    #parameters:
      # Add parameter here   
    steps:
      #- run:
      #    name: Install AWS CLI for rollback
      #    when: on_fail
      #    command: |
      #      apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: front-end-udapeople-${CIRCLE_WORKFLOW_ID} "
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID}" --recursive
            aws cloudformation delete-stack --stack-name front-end-udapeople-${CIRCLE_WORKFLOW_ID}
            aws cloudformation delete-stack --stack-name back-end-udapeople-${CIRCLE_WORKFLOW_ID}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.    
    steps:
      #- run:
      #    name: Install curl
      #    when: on_fail
      #    command: |
      #      apk add --no-cache curl
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: <<pipeline.parameters.memstash-token>>" --request GET https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/dist]
          key: backend-dist

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: front-end test
          command: |
             # Your code here
             cd frontend
             npm install
             npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: back-end test
          command: |
             # Your code here
             cd backend
             npm install
             npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Install dependencies
          command: |
             # Your code here
             cd frontend
             npm install
      - run:
          name: front-end scan
          command: |
             # Your code here
             cd frontend
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Install dependencies
          command: |
             # Your code here
             cd backend
             npm install
      - run:
          name: Back-end scan
          command: |
             # Your code here
             cd backend
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli:latest
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # Your code here
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "back-end-udapeople-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "front-end-udapeople-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Add back-end DNS to ansible inventory
          command: |
            # Your code here
            BACKEND_DNS=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --output text) 
            echo "$BACKEND_DNS" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: Add back-end DNS to memstash
          command: |
            BACK_END_AWS_DNS=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PrivateDnsName' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}"  \
              --output text )

            curl -H "Content-Type: text/plain" \
              -H "token: <<pipeline.parameters.memstash-token>>" \
              --request PUT --data "$BACK_END_AWS_DNS" \
              https://api.memstash.io/values/backend-dns-${CIRCLE_WORKFLOW_ID}


      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      #- destroy-environment   

  
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      #- image: ansible/ansible-runner:latest
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["c2:20:71:c5:cf:21:35:0c:21:77:e3:42:19:64:74:b6:76:a1:80:ac"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            # Your code here
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment   
      - revert-migrations      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            # Your code  here
            cd backend
            npm i
            npm run migrations >> migration_output.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd backend
            if grep -q "has been executed successfully." migration_output.txt
            then
              curl -H "Content-Type: text/plain" \
              -H "token: <<pipeline.parameters.memstash-token>>"\
              --request PUT --data "1" \
              https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID}
            fi
     # Here's where you will add some code to rollback on failure
      - destroy-environment   
      - revert-migrations      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update npm
            pip3 install awscli
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            export BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd frontend
            npm i
            npm run build
      - run: 
          name: Copy built frontend files to the S3 bucket
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment 
      - revert-migrations     

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["c2:20:71:c5:cf:21:35:0c:21:77:e3:42:19:64:74:b6:76:a1:80:ac"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update npm
            apk add --update ansible
            pip3 install awscli
      - restore_cache:
          keys: ["backend-dist"]    
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: run deploy
          command: |
            BACK_END_AWS_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}"  \
              --output text )
            echo ${BACK_END_AWS_IP}
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment 
      - revert-migrations
                    
  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website.us-east-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: get backend BACKEND-ip
          command: |
            BACK_END_AWS_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}"  \
              --output text )
            echo ${BACK_END_AWS_IP}
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            export BACKEND_DNS=$(sed -n 2p .circleci/ansible/inventory.txt)
            echo http://${BACKEND_DNS}:3030/api/status
            curl http://${BACKEND_DNS}:3030/api/status
            if curl http://${BACKEND_DNS}:3030/api/status
            then
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment 
      - revert-migrations  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli:latest
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation \
                  list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                  --no-paginate --output text)

            echo ${OldWorkflowID}

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                  --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople \
              --stack-name "front-end-udapeople-cgjerstad" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}"  

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                echo s3://udapeople-${OldWorkflowID}
                echo back-end-udapeople-${OldWorkflowID}
                echo front-end-udapeople-${OldWorkflowID}
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "back-end-udapeople-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "front-end-udapeople-${OldWorkflowID}"
              fi

      # Here's where you will add some code to rollback on failure
      #- destroy-environment 
      #- revert-migrations  


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]